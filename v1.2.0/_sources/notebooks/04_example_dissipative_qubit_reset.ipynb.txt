{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimization of Dissipative Qubit Reset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.374878Z",
     "start_time": "2019-02-12T04:47:25.200533Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "1"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "matplotlib       3.3.1\n",
      "qutip            4.5.0\n",
      "matplotlib.pylab 1.17.2\n",
      "scipy            1.3.1\n",
      "numpy            1.17.2\n",
      "krotov           1.2.0\n",
      "CPython 3.7.6\n",
      "IPython 7.17.0\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "%load_ext watermark\n",
    "import qutip\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib\n",
    "import matplotlib.pylab as plt\n",
    "import krotov\n",
    "\n",
    "%watermark -v --iversions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\newcommand{tr}[0]{\\operatorname{tr}}\n",
    "\\newcommand{diag}[0]{\\operatorname{diag}}\n",
    "\\newcommand{abs}[0]{\\operatorname{abs}}\n",
    "\\newcommand{pop}[0]{\\operatorname{pop}}\n",
    "\\newcommand{aux}[0]{\\text{aux}}\n",
    "\\newcommand{int}[0]{\\text{int}}\n",
    "\\newcommand{opt}[0]{\\text{opt}}\n",
    "\\newcommand{tgt}[0]{\\text{tgt}}\n",
    "\\newcommand{init}[0]{\\text{init}}\n",
    "\\newcommand{lab}[0]{\\text{lab}}\n",
    "\\newcommand{rwa}[0]{\\text{rwa}}\n",
    "\\newcommand{bra}[1]{\\langle#1\\vert}\n",
    "\\newcommand{ket}[1]{\\vert#1\\rangle}\n",
    "\\newcommand{Bra}[1]{\\left\\langle#1\\right\\vert}\n",
    "\\newcommand{Ket}[1]{\\left\\vert#1\\right\\rangle}\n",
    "\\newcommand{Braket}[2]{\\left\\langle #1\\vphantom{#2} \\mid\n",
    "#2\\vphantom{#1}\\right\\rangle}\n",
    "\\newcommand{op}[1]{\\hat{#1}}\n",
    "\\newcommand{Op}[1]{\\hat{#1}}\n",
    "\\newcommand{dd}[0]{\\,\\text{d}}\n",
    "\\newcommand{Liouville}[0]{\\mathcal{L}}\n",
    "\\newcommand{DynMap}[0]{\\mathcal{E}}\n",
    "\\newcommand{identity}[0]{\\mathbf{1}}\n",
    "\\newcommand{Norm}[1]{\\lVert#1\\rVert}\n",
    "\\newcommand{Abs}[1]{\\left\\vert#1\\right\\vert}\n",
    "\\newcommand{avg}[1]{\\langle#1\\rangle}\n",
    "\\newcommand{Avg}[1]{\\left\\langle#1\\right\\rangle}\n",
    "\\newcommand{AbsSq}[1]{\\left\\vert#1\\right\\vert^2}\n",
    "\\newcommand{Re}[0]{\\operatorname{Re}}\n",
    "\\newcommand{Im}[0]{\\operatorname{Im}}$\n",
    "\n",
    "This example illustrates an optimization in an *open* quantum system,\n",
    "where the dynamics is governed by the Liouville-von Neumann equation. Hence,\n",
    "states are represented by density matrices $\\op{\\rho}(t)$ and the time-evolution\n",
    "operator is given by a general dynamical map $\\DynMap$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define parameters\n",
    "\n",
    "The system consists of a qubit with Hamiltonian\n",
    "$\\op{H}_{q}(t) = - \\frac{\\omega_{q}}{2} \\op{\\sigma}_{z} - \\frac{\\epsilon(t)}{2} \\op{\\sigma}_{z}$,\n",
    "where $\\omega_{q}$ is an energy level splitting that can be dynamically adjusted\n",
    "by the control $\\epsilon(t)$. This qubit couples strongly to another two-level\n",
    "system (TLS) with Hamiltonian $\\op{H}_{t} = - \\frac{\\omega_{t}}{2} \\op{\\sigma}_{z}$ with\n",
    "static energy level splitting $\\omega_{t}$. The coupling strength between both\n",
    "systems is given by $J$ with the interaction Hamiltonian given by $\\op{H}_{\\int}\n",
    "= J \\op{\\sigma}_{x} \\otimes \\op{\\sigma}_{x}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Hamiltonian for the system of qubit and TLS is\n",
    "\n",
    "$$\n",
    "  \\op{H}(t)\n",
    "    = \\op{H}_{q}(t) \\otimes \\identity_{t}\n",
    "      + \\identity_{q} \\otimes \\op{H}_{t} + \\op{H}_{\\int}.\n",
    "$$\n",
    "\n",
    "In addition, the TLS is embedded in a heat bath with inverse temperature\n",
    "$\\beta$. The TLS couples to the bath with rate $\\kappa$. In order to simulate\n",
    "the dissipation arising from this coupling, we consider the two Lindblad\n",
    "operators\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "\\op{L}_{1} &= \\sqrt{\\kappa (N_{th}+1)} \\identity_{q} \\otimes \\ket{0}\\bra{1} \\\\\n",
    "\\op{L}_{2} &= \\sqrt{\\kappa N_{th}} \\identity_{q} \\otimes \\ket{1}\\bra{0}\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "with $N_{th} = 1/(e^{\\beta \\omega_{t}} - 1)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.385786Z",
     "start_time": "2019-02-12T04:47:26.379865Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "2"
    }
   },
   "outputs": [],
   "source": [
    "omega_q = 1.0  # qubit level splitting\n",
    "omega_T = 3.0  # TLS level splitting\n",
    "J = 0.1  # qubit-TLS coupling\n",
    "kappa = 0.04  # TLS decay rate\n",
    "beta = 1.0  # inverse bath temperature\n",
    "T = 25.0  # final time\n",
    "nt = 2500  # number of time steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the Liouvillian\n",
    "\n",
    "The dynamics of the qubit-TLS system state $\\op{\\rho}(t)$ is governed by the\n",
    "Liouville-von Neumann equation\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "  \\frac{\\partial}{\\partial t} \\op{\\rho}(t)\n",
    "    &= \\Liouville(t) \\op{\\rho}(t) \\\\\n",
    "    &= - i \\left[\\op{H}(t), \\op{\\rho}(t)\\right]\n",
    "      + \\sum_{k=1,2} \\left(\n",
    "            \\op{L}_{k} \\op{\\rho}(t) \\op{L}_{k}^\\dagger\n",
    "            - \\frac{1}{2}\n",
    "            \\op{L}_{k}^\\dagger\n",
    "            \\op{L}_{k} \\op{\\rho}(t)\n",
    "            - \\frac{1}{2} \\op{\\rho}(t)\n",
    "            \\op{L}_{k}^\\dagger\n",
    "            \\op{L}_{k}\n",
    "        \\right)\\,.\n",
    "\\end{split}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def liouvillian(omega_q, omega_T, J, kappa, beta):\n",
    "    \"\"\"Liouvillian for the coupled system of qubit and TLS\"\"\"\n",
    "\n",
    "    # drift qubit Hamiltonian\n",
    "    H0_q = 0.5 * omega_q * np.diag([-1, 1])\n",
    "    # drive qubit Hamiltonian\n",
    "    H1_q = 0.5 * np.diag([-1, 1])\n",
    "\n",
    "    # drift TLS Hamiltonian\n",
    "    H0_T = 0.5 * omega_T * np.diag([-1, 1])\n",
    "\n",
    "    # Lift Hamiltonians to joint system operators\n",
    "    H0 = np.kron(H0_q, np.identity(2)) + np.kron(np.identity(2), H0_T)\n",
    "    H1 = np.kron(H1_q, np.identity(2))\n",
    "\n",
    "    # qubit-TLS interaction\n",
    "    H_int = J * np.fliplr(np.diag([0, 1, 1, 0]))\n",
    "\n",
    "    # convert Hamiltonians to QuTiP objects\n",
    "    H0 = qutip.Qobj(H0 + H_int)\n",
    "    H1 = qutip.Qobj(H1)\n",
    "\n",
    "    # Define Lindblad operators\n",
    "    N = 1.0 / (np.exp(beta * omega_T) - 1.0)\n",
    "    # Cooling on TLS\n",
    "    L1 = np.sqrt(kappa * (N + 1)) * np.kron(\n",
    "        np.identity(2), np.array([[0, 1], [0, 0]])\n",
    "    )\n",
    "    # Heating on TLS\n",
    "    L2 = np.sqrt(kappa * N) * np.kron(\n",
    "        np.identity(2), np.array([[0, 0], [1, 0]])\n",
    "    )\n",
    "\n",
    "    # convert Lindblad operators to QuTiP objects\n",
    "    L1 = qutip.Qobj(L1)\n",
    "    L2 = qutip.Qobj(L2)\n",
    "\n",
    "    # generate the Liouvillian\n",
    "    L0 = qutip.liouvillian(H=H0, c_ops=[L1, L2])\n",
    "    L1 = qutip.liouvillian(H=H1)\n",
    "\n",
    "    # Shift the qubit and TLS into resonance by default\n",
    "    eps0 = lambda t, args: omega_T - omega_q\n",
    "\n",
    "    return [L0, [L1, eps0]]\n",
    "\n",
    "\n",
    "L = liouvillian(omega_q=omega_q, omega_T=omega_T, J=J, kappa=kappa, beta=beta)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the optimization target"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The initial state of qubit and TLS are assumed to be in thermal equilibrium with\n",
    "the heat bath (although only the TLS is directly interacting with the bath).\n",
    "Both states are given by\n",
    "\n",
    "$$\n",
    "  \\op{\\rho}_{\\alpha}^{th} =\n",
    "\\frac{e^{x_{\\alpha}} \\ket{0}\\bra{0} + e^{-x_{\\alpha}} \\ket{1}\\bra{1}}{2\n",
    "\\cosh(x_{\\alpha})},\n",
    "  \\qquad\n",
    "  x_{\\alpha} = \\frac{\\omega_{\\alpha} \\beta}{2},\n",
    "$$\n",
    "\n",
    "with $\\alpha = q,t$. The initial state of the bipartite system\n",
    "of qubit and TLS is given by the thermal state\n",
    "$\\op{\\rho}_{th} = \\op{\\rho}_{q}^{th} \\otimes \\op{\\rho}_{t}^{th}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.466604Z",
     "start_time": "2019-02-12T04:47:26.457181Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "6"
    }
   },
   "outputs": [],
   "source": [
    "x_q = omega_q * beta / 2.0\n",
    "rho_q_th = np.diag([np.exp(x_q), np.exp(-x_q)]) / (2 * np.cosh(x_q))\n",
    "\n",
    "x_T = omega_T * beta / 2.0\n",
    "rho_T_th = np.diag([np.exp(x_T), np.exp(-x_T)]) / (2 * np.cosh(x_T))\n",
    "\n",
    "rho_th = qutip.Qobj(np.kron(rho_q_th, rho_T_th))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we are ultimately only interested in the state of the qubit, we define\n",
    "`trace_TLS`. It returns the reduced state of the qubit\n",
    "$\\op{\\rho}_{q} = \\tr_{t}\\{\\op{\\rho}\\}$ when passed\n",
    "the state $\\op{\\rho}$ of the bipartite system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.482459Z",
     "start_time": "2019-02-12T04:47:26.472974Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "7"
    }
   },
   "outputs": [],
   "source": [
    "def trace_TLS(rho):\n",
    "    \"\"\"Partial trace over the TLS degrees of freedom\"\"\"\n",
    "    rho_q = np.zeros(shape=(2, 2), dtype=np.complex_)\n",
    "    rho_q[0, 0] = rho[0, 0] + rho[1, 1]\n",
    "    rho_q[0, 1] = rho[0, 2] + rho[1, 3]\n",
    "    rho_q[1, 0] = rho[2, 0] + rho[3, 1]\n",
    "    rho_q[1, 1] = rho[2, 2] + rho[3, 3]\n",
    "    return qutip.Qobj(rho_q)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The target state is (temporarily) the ground state of the bipartite system,\n",
    "i.e., $\\op{\\rho}_{\\tgt} = \\ket{00}\\bra{00}$. Note that in the end we will only\n",
    "optimize the reduced state of the qubit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.496869Z",
     "start_time": "2019-02-12T04:47:26.485940Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "8"
    }
   },
   "outputs": [],
   "source": [
    "rho_q_trg = np.diag([1, 0])\n",
    "rho_T_trg = np.diag([1, 0])\n",
    "rho_trg = np.kron(rho_q_trg, rho_T_trg)\n",
    "rho_trg = qutip.Qobj(rho_trg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, the list of `objectives` is defined, which contains the initial and target\n",
    "state and the Liouvillian $\\Liouville(t)$ that determines the system dynamics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.506011Z",
     "start_time": "2019-02-12T04:47:26.501241Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "9"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Objective[ρ₀[4,4] to ρ₁[4,4] via [𝓛₀[[4,4],[4,4]], [𝓛₁[[4,4],[4,4]], u₁(t)]]]]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objectives = [krotov.Objective(initial_state=rho_th, target=rho_trg, H=L)]\n",
    "objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following, we define the shape function $S(t)$, which we use in order to\n",
    "ensure a smooth switch on and off in the beginning and end. Note that at times\n",
    "$t$ where $S(t)$ vanishes, the updates of the field is suppressed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.514731Z",
     "start_time": "2019-02-12T04:47:26.508936Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "10"
    }
   },
   "outputs": [],
   "source": [
    "def S(t):\n",
    "    \"\"\"Shape function for the field update\"\"\"\n",
    "    return krotov.shapes.flattop(\n",
    "        t, t_start=0, t_stop=T, t_rise=0.05 * T, t_fall=0.05 * T, func='sinsq'\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We re-use this function to also shape the guess control $\\epsilon_{0}(t)$ to be\n",
    "zero at $t=0$ and $t=T$. This is on top of the originally defined constant\n",
    "value shifting the qubit and TLS into resonance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.524627Z",
     "start_time": "2019-02-12T04:47:26.517577Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "11"
    }
   },
   "outputs": [],
   "source": [
    "def shape_field(eps0):\n",
    "    \"\"\"Applies the shape function S(t) to the guess field\"\"\"\n",
    "    eps0_shaped = lambda t, args: eps0(t, args) * S(t)\n",
    "    return eps0_shaped\n",
    "\n",
    "\n",
    "L[1][1] = shape_field(L[1][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At last, before heading to the actual optimization below, we assign the shape\n",
    "function $S(t)$ to the OCT parameters of the control and choose `lambda_a`, a\n",
    "numerical parameter that controls the field update magnitude in each iteration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "pulse_options = {L[1][1]: dict(lambda_a=0.01, update_shape=S)}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate the dynamics of the guess field\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "tlist = np.linspace(0, T, nt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.545108Z",
     "start_time": "2019-02-12T04:47:26.537953Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "13"
    }
   },
   "outputs": [],
   "source": [
    "def plot_pulse(pulse, tlist):\n",
    "    fig, ax = plt.subplots()\n",
    "    if callable(pulse):\n",
    "        pulse = np.array([pulse(t, args=None) for t in tlist])\n",
    "    ax.plot(tlist, pulse)\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('pulse amplitude')\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following plot shows the guess field $\\epsilon_{0}(t)$ as a constant that\n",
    "puts qubit and TLS into resonance, but with a smooth switch-on and switch-off."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.773279Z",
     "start_time": "2019-02-12T04:47:26.547926Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "14"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pulse(L[1][1], tlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We solve the equation of motion for this guess field, storing the expectation\n",
    "values for the population in the bipartite levels:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "psi00 = qutip.Qobj(np.kron(np.array([1,0]), np.array([1,0])))\n",
    "psi01 = qutip.Qobj(np.kron(np.array([1,0]), np.array([0,1])))\n",
    "psi10 = qutip.Qobj(np.kron(np.array([0,1]), np.array([1,0])))\n",
    "psi11 = qutip.Qobj(np.kron(np.array([0,1]), np.array([0,1])))\n",
    "proj_00 = qutip.ket2dm(psi00)\n",
    "proj_01 = qutip.ket2dm(psi01)\n",
    "proj_10 = qutip.ket2dm(psi10)\n",
    "proj_11 = qutip.ket2dm(psi11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.872504Z",
     "start_time": "2019-02-12T04:47:26.775372Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "15"
    }
   },
   "outputs": [],
   "source": [
    "guess_dynamics = objectives[0].mesolve(\n",
    "    tlist, e_ops=[proj_00, proj_01, proj_10, proj_11]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:27.116092Z",
     "start_time": "2019-02-12T04:47:26.874340Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "16"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_population(result):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(\n",
    "        result.times,\n",
    "        np.array(result.expect[0]) + np.array(result.expect[1]),\n",
    "        label='qubit 0',\n",
    "    )\n",
    "    ax.plot(\n",
    "        result.times,\n",
    "        np.array(result.expect[0]) + np.array(result.expect[2]),\n",
    "        label='TLS 0',\n",
    "    )\n",
    "    ax.legend()\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('population')\n",
    "    plt.show(fig)\n",
    "\n",
    "\n",
    "plot_population(guess_dynamics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The population dynamics of qubit and TLS ground state show that\n",
    "both are oscillating and especially the qubit's ground state population reaches\n",
    "a maximal value at intermediate times $t < T$. This maximum is indeed the\n",
    "maximum that is physically possible. It corresponds to a perfect swap of\n",
    "the initial qubit and TLS purities. However, we want to reach this maximum at\n",
    "final time $T$ (not before), so the guess control is not yet working as desired."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our optimization target is the ground state $\\ket{\\Psi_{q}^{\\tgt}}\n",
    "= \\ket{0}$ of the qubit, irrespective of the state of the TLS. Thus, our\n",
    "optimization functional reads\n",
    "\n",
    "$$\n",
    "  F_{re} = 1 -\n",
    "\\Braket{\\Psi_{q}^{\\tgt}}{\\tr_{t}\\{\\op{\\rho}(T)\\} \\,|\\; \\Psi_{q}^{\\tgt}}\\,,\n",
    "$$\n",
    "\n",
    "and we first define `print_qubit_error`, which prints out the\n",
    "above functional after each iteration.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:27.124250Z",
     "start_time": "2019-02-12T04:47:27.118668Z"
    }
   },
   "outputs": [],
   "source": [
    "def print_qubit_error(**args):\n",
    "    \"\"\"Utility function writing the qubit error to screen\"\"\"\n",
    "    taus = []\n",
    "    for state_T in args['fw_states_T']:\n",
    "        state_q_T = trace_TLS(state_T)\n",
    "        taus.append(state_q_T[0, 0].real)\n",
    "    J_T_re = 1 - np.average(taus)\n",
    "    print(\"    qubit error: %.1e\" % J_T_re)\n",
    "    return J_T_re"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to minimize the above functional, we need to provide the correct\n",
    "`chi_constructor` for the Krotov optimization. This is the only place where the\n",
    "functional (implicitly) enters the optimization.\n",
    "Given our bipartite system and choice of $F_{re}$, the equation for\n",
    "$\\op{\\chi}(T)$ reads\n",
    "\n",
    "$$\n",
    "  \\op{\\chi}(T) =\n",
    "  \\sum_{k=0,1} a_{k}\n",
    "\\op{\\rho}_{q}^{\\tgt} \\otimes \\ket{k}\\bra{k}\n",
    "$$\n",
    "\n",
    "with $\\{\\ket{k}\\}$ a\n",
    "basis for the TLS Hilbert space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:27.144420Z",
     "start_time": "2019-02-12T04:47:27.132277Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "18"
    }
   },
   "outputs": [],
   "source": [
    "def TLS_onb_trg():\n",
    "    \"\"\"Returns the tensor product of qubit target state\n",
    "    and a basis for the TLS Hilbert space\"\"\"\n",
    "    rho1 = qutip.Qobj(np.kron(rho_q_trg, np.diag([1, 0])))\n",
    "    rho2 = qutip.Qobj(np.kron(rho_q_trg, np.diag([0, 1])))\n",
    "    return [rho1, rho2]\n",
    "\n",
    "\n",
    "TLS_onb = TLS_onb_trg()\n",
    "\n",
    "\n",
    "def chis_qubit(fw_states_T, objectives, tau_vals):\n",
    "    \"\"\"Calculate chis for the chosen functional\"\"\"\n",
    "    chis = []\n",
    "    for state_i_T in fw_states_T:\n",
    "        chis_i = np.zeros(shape=(4, 4), dtype=np.complex_)\n",
    "        for state_k in TLS_onb:\n",
    "            a_i_k = krotov.optimize._overlap(state_i_T, state_k)\n",
    "            chis_i += a_i_k * state_k\n",
    "        chis.append(qutip.Qobj(chis_i))\n",
    "    return chis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now carry out the optimization for five iterations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 0\n",
      "    objectives:\n",
      "        1:ρ₀[4,4] to ρ₁[4,4] via [𝓛₀[[4,4],[4,4]], [𝓛₁[[4,4],[4,4]], u₂(t)]]\n",
      "    adjoint objectives:\n",
      "        1:ρ₂[4,4] to ρ₃[4,4] via [𝓛₂[[4,4],[4,4]], [𝓛₃[[4,4],[4,4]], u₂(t)]]\n",
      "    chi_constructor: chis_qubit\n",
      "    mu: derivative_wrt_pulse\n",
      "    S(t) (ranges): [0.000000, 1.000000]\n",
      "    iter_start: 0\n",
      "    iter_stop: 5\n",
      "    duration: 0.3 secs (started at 2020-08-17 10:41:30)\n",
      "    optimized pulses (ranges): [0.00, 2.00]\n",
      "    ∫gₐ(t)dt: 0.00e+00\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): None, None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (7.97e-01:0.00π)\n",
      "    qubit error: 1.1e-01\n",
      "Iteration 1\n",
      "    duration: 2.5 secs (started at 2020-08-17 10:41:31)\n",
      "    optimized pulses (ranges): [0.00, 2.06]\n",
      "    ∫gₐ(t)dt: 7.64e-02\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (7.98e-01:0.00π)\n",
      "    qubit error: 1.1e-01\n",
      "Iteration 2\n",
      "    duration: 2.9 secs (started at 2020-08-17 10:41:33)\n",
      "    optimized pulses (ranges): [0.00, 2.23]\n",
      "    ∫gₐ(t)dt: 5.71e-01\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (8.01e-01:0.00π)\n",
      "    qubit error: 6.7e-02\n",
      "Iteration 3\n",
      "    duration: 2.9 secs (started at 2020-08-17 10:41:36)\n",
      "    optimized pulses (ranges): [0.00, 2.33]\n",
      "    ∫gₐ(t)dt: 8.19e-02\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (7.99e-01:0.00π)\n",
      "    qubit error: 5.0e-02\n",
      "Iteration 4\n",
      "    duration: 2.9 secs (started at 2020-08-17 10:41:39)\n",
      "    optimized pulses (ranges): [0.00, 2.19]\n",
      "    ∫gₐ(t)dt: 2.16e-01\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (8.02e-01:0.00π)\n",
      "    qubit error: 4.9e-02\n",
      "Iteration 5\n",
      "    duration: 3.0 secs (started at 2020-08-17 10:41:42)\n",
      "    optimized pulses (ranges): [0.00, 2.15]\n",
      "    ∫gₐ(t)dt: 6.40e-02\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (8.03e-01:0.00π)\n",
      "    qubit error: 4.9e-02\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "# the DensityMatrixODEPropagator is not sufficiently exact to guarantee that\n",
    "# you won't get slightly different results in the optimization when\n",
    "# running this on different systems\n",
    "opt_result = krotov.optimize_pulses(\n",
    "    objectives,\n",
    "    pulse_options,\n",
    "    tlist,\n",
    "    propagator=krotov.propagators.DensityMatrixODEPropagator(\n",
    "        atol=1e-10, rtol=1e-8\n",
    "    ),\n",
    "    chi_constructor=chis_qubit,\n",
    "    info_hook=krotov.info_hooks.chain(\n",
    "        krotov.info_hooks.print_debug_information, print_qubit_error\n",
    "    ),\n",
    "    check_convergence=krotov.convergence.check_monotonic_error,\n",
    "    iter_stop=5,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "20"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Krotov Optimization Result\n",
       "--------------------------\n",
       "- Started at 2020-08-17 10:41:30\n",
       "- Number of objectives: 1\n",
       "- Number of iterations: 5\n",
       "- Reason for termination: Reached 5 iterations\n",
       "- Ended at 2020-08-17 10:41:45 (0:00:15)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt_result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate the dynamics of the optimized field"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot of the optimized field shows that the optimization slightly shifts\n",
    "the field such that qubit and TLS are no longer perfectly in resonance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "21"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pulse(opt_result.optimized_controls[0], tlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This slight shift of qubit and TLS out of resonance delays the population\n",
    "oscillations between qubit and TLS ground state such that the qubit ground\n",
    "state is maximally populated at final time $T$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "22"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "optimized_dynamics = opt_result.optimized_objectives[0].mesolve(\n",
    "    tlist, e_ops=[proj_00, proj_01, proj_10, proj_11]\n",
    ")\n",
    "\n",
    "plot_population(optimized_dynamics)"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "jupytext": {
   "formats": ""
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
