{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ensemble Optimization for Robust Pulses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.419196Z",
     "start_time": "2020-03-22T05:01:27.400452Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "1"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:07.894457Z",
     "iopub.status.busy": "2021-01-13T19:08:07.892869Z",
     "iopub.status.idle": "2021-01-13T19:08:09.166325Z",
     "shell.execute_reply": "2021-01-13T19:08:09.166909Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python implementation: CPython\n",
      "Python version       : 3.7.6\n",
      "IPython version      : 7.19.0\n",
      "\n",
      "numpy     : 1.17.2\n",
      "scipy     : 1.3.1\n",
      "krotov    : 1.2.1\n",
      "sys       : 3.7.6 (default, Jan  6 2020, 00:53:52) \n",
      "[Clang 11.0.0 (clang-1100.0.33.16)]\n",
      "qutip     : 4.5.0\n",
      "matplotlib: 3.3.3\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "%load_ext watermark\n",
    "import sys\n",
    "import os\n",
    "import qutip\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib\n",
    "import matplotlib.pylab as plt\n",
    "import krotov\n",
    "from qutip import Qobj\n",
    "import pickle\n",
    "\n",
    "%watermark -v --iversions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\newcommand{tr}[0]{\\operatorname{tr}}\n",
    "\\newcommand{diag}[0]{\\operatorname{diag}}\n",
    "\\newcommand{abs}[0]{\\operatorname{abs}}\n",
    "\\newcommand{pop}[0]{\\operatorname{pop}}\n",
    "\\newcommand{aux}[0]{\\text{aux}}\n",
    "\\newcommand{opt}[0]{\\text{opt}}\n",
    "\\newcommand{tgt}[0]{\\text{tgt}}\n",
    "\\newcommand{init}[0]{\\text{init}}\n",
    "\\newcommand{lab}[0]{\\text{lab}}\n",
    "\\newcommand{rwa}[0]{\\text{rwa}}\n",
    "\\newcommand{bra}[1]{\\langle#1\\vert}\n",
    "\\newcommand{ket}[1]{\\vert#1\\rangle}\n",
    "\\newcommand{Bra}[1]{\\left\\langle#1\\right\\vert}\n",
    "\\newcommand{Ket}[1]{\\left\\vert#1\\right\\rangle}\n",
    "\\newcommand{Braket}[2]{\\left\\langle #1\\vphantom{#2}\\mid{#2}\\vphantom{#1}\\right\\rangle}\n",
    "\\newcommand{ketbra}[2]{\\vert#1\\rangle\\!\\langle#2\\vert}\n",
    "\\newcommand{op}[1]{\\hat{#1}}\n",
    "\\newcommand{Op}[1]{\\hat{#1}}\n",
    "\\newcommand{dd}[0]{\\,\\text{d}}\n",
    "\\newcommand{Liouville}[0]{\\mathcal{L}}\n",
    "\\newcommand{DynMap}[0]{\\mathcal{E}}\n",
    "\\newcommand{identity}[0]{\\mathbf{1}}\n",
    "\\newcommand{Norm}[1]{\\lVert#1\\rVert}\n",
    "\\newcommand{Abs}[1]{\\left\\vert#1\\right\\vert}\n",
    "\\newcommand{avg}[1]{\\langle#1\\rangle}\n",
    "\\newcommand{Avg}[1]{\\left\\langle#1\\right\\rangle}\n",
    "\\newcommand{AbsSq}[1]{\\left\\vert#1\\right\\vert^2}\n",
    "\\newcommand{Re}[0]{\\operatorname{Re}}\n",
    "\\newcommand{Im}[0]{\\operatorname{Im}}\n",
    "\\newcommand{toP}[0]{\\omega_{12}}\n",
    "\\newcommand{toS}[0]{\\omega_{23}}$\n",
    "\n",
    "This example revisits the [Optimization of a State-to-State Transfer in a\n",
    "Lambda System in the RWA](02_example_lambda_system_rwa_complex_pulse.ipynb),\n",
    "attempting to make the control pulses robustness with respect to variations in\n",
    "the pulse amplitude, through \"ensemble optimization\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note**: This notebook uses some parallelization features (`parallel_map`/`multiprocessing`). Unfortunately, on Windows (and macOS with Python >= 3.8), `multiprocessing` does not work correctly for functions defined in a Jupyter notebook (due to the [spawn method](https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods) being used on Windows, instead of Unix-`fork`, see also https://stackoverflow.com/questions/45719956). We can use the third-party [loky](https://loky.readthedocs.io/) library to fix this, but this significantly increases the overhead of multi-process parallelization. The use of parallelization here is for illustration only and makes no guarantee of actually improving the runtime of the optimization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.426125Z",
     "start_time": "2020-03-22T05:01:29.421562Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.172105Z",
     "iopub.status.busy": "2021-01-13T19:08:09.171209Z",
     "iopub.status.idle": "2021-01-13T19:08:09.174382Z",
     "shell.execute_reply": "2021-01-13T19:08:09.173626Z"
    }
   },
   "outputs": [],
   "source": [
    "krotov.parallelization.set_parallelization(use_loky=True)\n",
    "from krotov.parallelization import parallel_map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Control objectives for population transfer in the Lambda system\n",
    "\n",
    "As in the original example, we define the Hamiltonian for a Lambda system in\n",
    "the rotating wave approximation, like this:\n",
    "\n",
    "![Lambda system considered in this notebook](energylevels.png)\n",
    "\n",
    "We set up the control fields and the Hamiltonian exactly as before:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.441078Z",
     "start_time": "2020-03-22T05:01:29.429149Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.181541Z",
     "iopub.status.busy": "2021-01-13T19:08:09.180705Z",
     "iopub.status.idle": "2021-01-13T19:08:09.182795Z",
     "shell.execute_reply": "2021-01-13T19:08:09.183539Z"
    }
   },
   "outputs": [],
   "source": [
    "def Omega_P1(t, args):\n",
    "    \"\"\"Guess for the real part of the pump pulse\"\"\"\n",
    "    Ω0 = 5.0\n",
    "    return Ω0 * krotov.shapes.blackman(t, t_start=2.0, t_stop=5.0)\n",
    "\n",
    "\n",
    "def Omega_P2(t, args):\n",
    "    \"\"\"Guess for the imaginary part of the pump pulse\"\"\"\n",
    "    return 0.0\n",
    "\n",
    "\n",
    "def Omega_S1(t, args):\n",
    "    \"\"\"Guess for the real part of the Stokes pulse\"\"\"\n",
    "    Ω0 = 5.0\n",
    "    return Ω0 * krotov.shapes.blackman(t, t_start=0.0, t_stop=3.0)\n",
    "\n",
    "\n",
    "def Omega_S2(t, args):\n",
    "    \"\"\"Guess for the imaginary part of the Stokes pulse\"\"\"\n",
    "    return 0.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.448554Z",
     "start_time": "2020-03-22T05:01:29.443630Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.188901Z",
     "iopub.status.busy": "2021-01-13T19:08:09.188088Z",
     "iopub.status.idle": "2021-01-13T19:08:09.190490Z",
     "shell.execute_reply": "2021-01-13T19:08:09.191027Z"
    }
   },
   "outputs": [],
   "source": [
    "tlist = np.linspace(0, 5, 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.467163Z",
     "start_time": "2020-03-22T05:01:29.452425Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.200118Z",
     "iopub.status.busy": "2021-01-13T19:08:09.199293Z",
     "iopub.status.idle": "2021-01-13T19:08:09.201481Z",
     "shell.execute_reply": "2021-01-13T19:08:09.202001Z"
    }
   },
   "outputs": [],
   "source": [
    "def hamiltonian(E1=0.0, E2=10.0, E3=5.0, omega_P=9.5, omega_S=4.5):\n",
    "    \"\"\"Lambda-system Hamiltonian in the RWA\"\"\"\n",
    "\n",
    "    # detunings\n",
    "    ΔP = E1 + omega_P - E2\n",
    "    ΔS = E3 + omega_S - E2\n",
    "\n",
    "    H0 = Qobj([[ΔP, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, ΔS]])\n",
    "\n",
    "    HP_re = -0.5 * Qobj([[0.0, 1.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 0.0]])\n",
    "    HP_im = -0.5 * Qobj([[0.0, 1.0j, 0.0], [-1.0j, 0.0, 0.0], [0.0, 0.0, 0.0]])\n",
    "\n",
    "    HS_re = -0.5 * Qobj([[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]])\n",
    "    HS_im = -0.5 * Qobj([[0.0, 0.0, 0.0], [0.0, 0.0, 1.0j], [0.0, -1.0j, 0.0]])\n",
    "\n",
    "    return [\n",
    "        H0,\n",
    "        [HP_re, Omega_P1],\n",
    "        [HP_im, Omega_P2],\n",
    "        [HS_re, Omega_S1],\n",
    "        [HS_im, Omega_S2],\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.480174Z",
     "start_time": "2020-03-22T05:01:29.470251Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.209322Z",
     "iopub.status.busy": "2021-01-13T19:08:09.208383Z",
     "iopub.status.idle": "2021-01-13T19:08:09.210688Z",
     "shell.execute_reply": "2021-01-13T19:08:09.211214Z"
    }
   },
   "outputs": [],
   "source": [
    "H = hamiltonian()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The control objective is the realization of a phase sensitive $\\ket{1}\n",
    "\\rightarrow \\ket{3}$ transition in the lab frame. Thus, in the rotating frame,\n",
    "we must take into account an additional phase factor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.492615Z",
     "start_time": "2020-03-22T05:01:29.482710Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.218016Z",
     "iopub.status.busy": "2021-01-13T19:08:09.217190Z",
     "iopub.status.idle": "2021-01-13T19:08:09.220060Z",
     "shell.execute_reply": "2021-01-13T19:08:09.219504Z"
    }
   },
   "outputs": [],
   "source": [
    "ket1 = qutip.Qobj(np.array([1.0, 0.0, 0.0]))\n",
    "ket2 = qutip.Qobj(np.array([0.0, 1.0, 0.0]))\n",
    "ket3 = qutip.Qobj(np.array([0.0, 0.0, 1.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.502476Z",
     "start_time": "2020-03-22T05:01:29.497857Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.225175Z",
     "iopub.status.busy": "2021-01-13T19:08:09.224147Z",
     "iopub.status.idle": "2021-01-13T19:08:09.226818Z",
     "shell.execute_reply": "2021-01-13T19:08:09.227370Z"
    }
   },
   "outputs": [],
   "source": [
    "def rwa_target_state(ket3, E2=10.0, omega_S=4.5, T=5):\n",
    "    return np.exp(1j * (E2 - omega_S) * T) * ket3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.511580Z",
     "start_time": "2020-03-22T05:01:29.505632Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.233704Z",
     "iopub.status.busy": "2021-01-13T19:08:09.232129Z",
     "iopub.status.idle": "2021-01-13T19:08:09.235130Z",
     "shell.execute_reply": "2021-01-13T19:08:09.235624Z"
    }
   },
   "outputs": [],
   "source": [
    "psi_target = rwa_target_state(ket3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.523688Z",
     "start_time": "2020-03-22T05:01:29.514140Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.244310Z",
     "iopub.status.busy": "2021-01-13T19:08:09.243284Z",
     "iopub.status.idle": "2021-01-13T19:08:09.247175Z",
     "shell.execute_reply": "2021-01-13T19:08:09.247726Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₁[3,3], u₁(t)], [H₂[3,3], u₂(t)], [H₃[3,3], u₃(t)], [H₄[3,3], u₄(t)]]]]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objective = krotov.Objective(initial_state=ket1, target=psi_target, H=H)\n",
    "objectives = [objective]\n",
    "objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Robustness to amplitude fluctuations\n",
    "\n",
    "A potential source of error is fluctuations in the pulse amplitude between\n",
    "different runs of the experiment. To account for this, the `hamiltonian`\n",
    "function above include a parameter `mu` that scales the pulse amplitudes by the\n",
    "given factor.\n",
    "\n",
    "We can analyze the result of the [Optimization of a State-to-State Transfer in\n",
    "a Lambda System in the RWA](02_example_lambda_system_rwa_complex_pulse.ipynb)\n",
    "with respect to such fluctuations. We load the earlier optimization result from\n",
    "disk, and verify that the optimized controls produce the $\\ket{1} \\rightarrow\n",
    "\\ket{3}$ transition as desired."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.532018Z",
     "start_time": "2020-03-22T05:01:29.525825Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.252928Z",
     "iopub.status.busy": "2021-01-13T19:08:09.251891Z",
     "iopub.status.idle": "2021-01-13T19:08:09.257610Z",
     "shell.execute_reply": "2021-01-13T19:08:09.258157Z"
    }
   },
   "outputs": [],
   "source": [
    "opt_result_unperturbed = krotov.result.Result.load(\n",
    "    'lambda_rwa_opt_result.dump', objectives=[objective]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.540217Z",
     "start_time": "2020-03-22T05:01:29.534230Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.264538Z",
     "iopub.status.busy": "2021-01-13T19:08:09.263442Z",
     "iopub.status.idle": "2021-01-13T19:08:09.267383Z",
     "shell.execute_reply": "2021-01-13T19:08:09.266507Z"
    }
   },
   "outputs": [],
   "source": [
    "proj1 = qutip.ket2dm(ket1)\n",
    "proj2 = qutip.ket2dm(ket2)\n",
    "proj3 = qutip.ket2dm(ket3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.860337Z",
     "start_time": "2020-03-22T05:01:29.542275Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.542804Z",
     "iopub.status.busy": "2021-01-13T19:08:09.541647Z",
     "iopub.status.idle": "2021-01-13T19:08:09.544477Z",
     "shell.execute_reply": "2021-01-13T19:08:09.545016Z"
    }
   },
   "outputs": [],
   "source": [
    "opt_unperturbed_dynamics = (\n",
    "    opt_result_unperturbed\n",
    "    .optimized_objectives[0]\n",
    "    .mesolve(tlist, e_ops=[proj1, proj2, proj3])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:29.874858Z",
     "start_time": "2020-03-22T05:01:29.862369Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.551813Z",
     "iopub.status.busy": "2021-01-13T19:08:09.550636Z",
     "iopub.status.idle": "2021-01-13T19:08:09.553397Z",
     "shell.execute_reply": "2021-01-13T19:08:09.554119Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_population(result):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(result.times, result.expect[0], label='1')\n",
    "    ax.plot(result.times, result.expect[1], label='2')\n",
    "    ax.plot(result.times, result.expect[2], label='3')\n",
    "    ax.legend()\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('population')\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:30.119626Z",
     "start_time": "2020-03-22T05:01:29.879489Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.579163Z",
     "iopub.status.busy": "2021-01-13T19:08:09.574817Z",
     "iopub.status.idle": "2021-01-13T19:08:09.800551Z",
     "shell.execute_reply": "2021-01-13T19:08:09.801179Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(opt_unperturbed_dynamics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "Now we can analyze how robust this control is for variations of ±20% of the\n",
    "pulse amplitude. Numerically, this is achieved by scaling the control\n",
    "Hamiltonians with a pre-factor $\\mu$.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:30.128652Z",
     "start_time": "2020-03-22T05:01:30.122273Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.807194Z",
     "iopub.status.busy": "2021-01-13T19:08:09.806246Z",
     "iopub.status.idle": "2021-01-13T19:08:09.808386Z",
     "shell.execute_reply": "2021-01-13T19:08:09.808895Z"
    }
   },
   "outputs": [],
   "source": [
    "def scale_control(H, *, mu):\n",
    "    \"\"\"Scale all control Hamiltonians by `mu`.\"\"\"\n",
    "    H_scaled = []\n",
    "    for spec in H:\n",
    "        if isinstance(spec, list):\n",
    "            H_scaled.append([mu * spec[0], spec[1]])\n",
    "        else:\n",
    "            H_scaled.append(spec)\n",
    "    return H_scaled"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the analysis, we take the following sample of $\\mu$ values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:30.138078Z",
     "start_time": "2020-03-22T05:01:30.131210Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.813631Z",
     "iopub.status.busy": "2021-01-13T19:08:09.812835Z",
     "iopub.status.idle": "2021-01-13T19:08:09.815107Z",
     "shell.execute_reply": "2021-01-13T19:08:09.815698Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "mu_vals = np.linspace(0.75, 1.25, 33)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "We measure the success of the transfer via the \"population error\", i.e., the\n",
    "deviation from 1.0 of the population in state $\\ket{3}$ at final time $T$.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:30.153375Z",
     "start_time": "2020-03-22T05:01:30.144877Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.820763Z",
     "iopub.status.busy": "2021-01-13T19:08:09.820016Z",
     "iopub.status.idle": "2021-01-13T19:08:09.822185Z",
     "shell.execute_reply": "2021-01-13T19:08:09.822693Z"
    }
   },
   "outputs": [],
   "source": [
    "def pop_error(obj, mu):\n",
    "    res = obj.mesolve(tlist, H=scale_control(obj.H, mu=mu), e_ops=[proj3])\n",
    "    return 1 - res.expect[0][-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:40.680753Z",
     "start_time": "2020-03-22T05:01:30.156668Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:09.827842Z",
     "iopub.status.busy": "2021-01-13T19:08:09.827114Z",
     "iopub.status.idle": "2021-01-13T19:08:18.886568Z",
     "shell.execute_reply": "2021-01-13T19:08:18.887167Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "def _f(mu):\n",
    "    # parallel_map needs a global function\n",
    "    return pop_error(opt_result_unperturbed.optimized_objectives[0], mu=mu)\n",
    "\n",
    "\n",
    "pop_errors_norobust = parallel_map(_f, mu_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:40.693446Z",
     "start_time": "2020-03-22T05:01:40.684478Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:18.896317Z",
     "iopub.status.busy": "2021-01-13T19:08:18.895334Z",
     "iopub.status.idle": "2021-01-13T19:08:18.897736Z",
     "shell.execute_reply": "2021-01-13T19:08:18.898304Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_robustness(mu_vals, pop_errors, pop_errors0=None):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(mu_vals, pop_errors, label='1')\n",
    "    if pop_errors0 is not None:\n",
    "        ax.set_prop_cycle(None)  # reset colors\n",
    "        if isinstance(pop_errors0, list):\n",
    "            for (i, pop_errors_prev) in enumerate(pop_errors0):\n",
    "                ax.plot(\n",
    "                    mu_vals, pop_errors_prev, ls='dotted', label=(\"%d\" % (-i))\n",
    "                )\n",
    "        else:\n",
    "            ax.plot(mu_vals, pop_errors0, ls='dotted', label='0')\n",
    "    ax.set_xlabel(\"relative coupling strength\")\n",
    "    ax.set_ylabel(r\"$1 - \\vert \\langle \\Psi \\vert 3 \\rangle \\vert^2$\")\n",
    "    ax.axvspan(0.9, 1.1, alpha=0.25, color='red')\n",
    "    ax.set_yscale('log')\n",
    "    if pop_errors0 is not None:\n",
    "        ax.legend()\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:41.453727Z",
     "start_time": "2020-03-22T05:01:40.696343Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:18.946073Z",
     "iopub.status.busy": "2021-01-13T19:08:18.943448Z",
     "iopub.status.idle": "2021-01-13T19:08:19.673596Z",
     "shell.execute_reply": "2021-01-13T19:08:19.674546Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_robustness(mu_vals, pop_errors_norobust)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot shows that as the pulse amplitude deviates from the optimal value, the\n",
    "error rises quickly: our previous optimization result is not robust.\n",
    "\n",
    "The highlighted region of ±10% is our \"region of interest\" within\n",
    "which we would like the control to be robust by applying optimal control."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting the ensemble objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "They central idea of optimizing for robustness is to take multiple copies of\n",
    "the Hamiltonian, sampling over the space of variations to which would\n",
    "like to be robust, and optimize over the average of this ensemble.\n",
    "\n",
    "Here, we sample 5 values of $\\mu$ (including the unperturbed $\\mu=1$) in the\n",
    "region of interest, $\\mu \\in [0.9, 1.1]$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:41.462459Z",
     "start_time": "2020-03-22T05:01:41.456749Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:19.680197Z",
     "iopub.status.busy": "2021-01-13T19:08:19.679121Z",
     "iopub.status.idle": "2021-01-13T19:08:19.682102Z",
     "shell.execute_reply": "2021-01-13T19:08:19.682752Z"
    }
   },
   "outputs": [],
   "source": [
    "ensemble_mu = [0.9, 0.95, 1.0, 1.05, 1.1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The corresponding Hamiltonians are"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:41.487262Z",
     "start_time": "2020-03-22T05:01:41.474312Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:19.690334Z",
     "iopub.status.busy": "2021-01-13T19:08:19.689231Z",
     "iopub.status.idle": "2021-01-13T19:08:19.692000Z",
     "shell.execute_reply": "2021-01-13T19:08:19.692601Z"
    }
   },
   "outputs": [],
   "source": [
    "ham_ensemble = [scale_control(objective.H, mu=mu) for mu in ensemble_mu]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `krotov.objectives.ensemble_objectives` extends the original objective of a\n",
    "single unperturbed state-to-state transition with one additional objective for\n",
    "each ensemble Hamiltonian for $\\mu \\neq 1$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:41.504002Z",
     "start_time": "2020-03-22T05:01:41.492908Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:19.702629Z",
     "iopub.status.busy": "2021-01-13T19:08:19.700907Z",
     "iopub.status.idle": "2021-01-13T19:08:19.707412Z",
     "shell.execute_reply": "2021-01-13T19:08:19.708907Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₅[3,3], u₁(t)], [H₆[3,3], u₂(t)], [H₇[3,3], u₃(t)], [H₈[3,3], u₄(t)]]],\n",
       " Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₉[3,3], u₁(t)], [H₁₀[3,3], u₂(t)], [H₁₁[3,3], u₃(t)], [H₁₂[3,3], u₄(t)]]],\n",
       " Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₁₃[3,3], u₁(t)], [H₁₄[3,3], u₂(t)], [H₁₅[3,3], u₃(t)], [H₁₆[3,3], u₄(t)]]],\n",
       " Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₁₇[3,3], u₁(t)], [H₁₈[3,3], u₂(t)], [H₁₉[3,3], u₃(t)], [H₂₀[3,3], u₄(t)]]],\n",
       " Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₂₁[3,3], u₁(t)], [H₂₂[3,3], u₂(t)], [H₂₃[3,3], u₃(t)], [H₂₄[3,3], u₄(t)]]]]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ensemble_objectives = krotov.objectives.ensemble_objectives(\n",
    "    objectives, ham_ensemble, keep_original_objectives=False,\n",
    ")\n",
    "ensemble_objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is important that all five objectives reference the same four control\n",
    "pulses, as is the case here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the same update shape $S(t)$ and $\\lambda_a$ value as in the original optimization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:41.515808Z",
     "start_time": "2020-03-22T05:01:41.506536Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:19.717814Z",
     "iopub.status.busy": "2021-01-13T19:08:19.716579Z",
     "iopub.status.idle": "2021-01-13T19:08:19.719997Z",
     "shell.execute_reply": "2021-01-13T19:08:19.719376Z"
    }
   },
   "outputs": [],
   "source": [
    "def S(t):\n",
    "    \"\"\"Scales the Krotov methods update of the pulse value at the time t\"\"\"\n",
    "    return krotov.shapes.flattop(t, 0.0, 5, 0.3, func='sinsq')\n",
    "\n",
    "\n",
    "λ = 0.5\n",
    "\n",
    "pulse_options = {\n",
    "    H[1][1]: dict(lambda_a=λ, update_shape=S),\n",
    "    H[2][1]: dict(lambda_a=λ, update_shape=S),\n",
    "    H[3][1]: dict(lambda_a=λ, update_shape=S),\n",
    "    H[4][1]: dict(lambda_a=λ, update_shape=S),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "It will be interesting to see how the optimization progresses for each\n",
    "individual element of the ensemble. Thus, we write an `info_hook` routine that\n",
    "prints out a tabular overview of $1 - \\Re\\Braket{\\Psi(T)}{3}_{\\Op{H}_i}$ for\n",
    "all $\\Op{H}_i$ in the ensemble, as well as their average (the total functional\n",
    "$J_T$ that is being minimized)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:41.526072Z",
     "start_time": "2020-03-22T05:01:41.518139Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:19.728339Z",
     "iopub.status.busy": "2021-01-13T19:08:19.727160Z",
     "iopub.status.idle": "2021-01-13T19:08:19.729902Z",
     "shell.execute_reply": "2021-01-13T19:08:19.730496Z"
    }
   },
   "outputs": [],
   "source": [
    "def print_J_T_per_target(**kwargs):\n",
    "    iteration = kwargs['iteration']\n",
    "    N = len(ensemble_mu)\n",
    "    if iteration == 0:\n",
    "        print(\n",
    "            \"iteration \"\n",
    "            + \"%11s \" % \"J_T(avg)\"\n",
    "            + \" \".join([(\"J_T(μ=%.2f)\" % μ) for μ in ensemble_mu])\n",
    "        )\n",
    "    J_T_vals = 1 - kwargs['tau_vals'].real\n",
    "    J_T = np.sum(J_T_vals) / N\n",
    "    print(\n",
    "        (\"%9d \" % iteration)\n",
    "        + (\"%11.2e \" % J_T)\n",
    "        + \" \".join([(\"%11.2e\" % v) for v in J_T_vals])\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also want to look at the output of ``krotov.info_hooks.print_table``, but\n",
    "in order to keep the output orderly, we will write that information to a file\n",
    "`ensemble_opt.log`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:01:41.534779Z",
     "start_time": "2020-03-22T05:01:41.528504Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:19.736289Z",
     "iopub.status.busy": "2021-01-13T19:08:19.735184Z",
     "iopub.status.idle": "2021-01-13T19:08:19.738745Z",
     "shell.execute_reply": "2021-01-13T19:08:19.739534Z"
    }
   },
   "outputs": [],
   "source": [
    "log_fh = open(\"ensemble_opt.log\", \"w\", encoding=\"utf-8\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To speed up the optimization slightly, we parallelize across the five\n",
    "objectives with appropriate `parallel_map` functions.\n",
    "The optimization starts for the same guess pulses as the original [Optimization\n",
    "of a State-to-State Transfer in a Lambda System in the\n",
    "RWA](02_example_lambda_system_rwa_complex_pulse.ipynb). Generally, for a\n",
    "robustness ensemble optimization, this will yield better results than trying to\n",
    "take the optimized pulses for the unperturbed system as a guess.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:03.283073Z",
     "start_time": "2020-03-22T05:01:41.538943Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "16"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:08:19.751077Z",
     "iopub.status.busy": "2021-01-13T19:08:19.749536Z",
     "iopub.status.idle": "2021-01-13T19:13:11.011409Z",
     "shell.execute_reply": "2021-01-13T19:13:11.012598Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iteration    J_T(avg) J_T(μ=0.90) J_T(μ=0.95) J_T(μ=1.00) J_T(μ=1.05) J_T(μ=1.10)\n",
      "        0    1.01e+00    1.01e+00    1.01e+00    1.01e+00    1.01e+00    1.01e+00\n",
      "        1    6.79e-01    6.94e-01    6.83e-01    6.75e-01    6.71e-01    6.71e-01\n",
      "        2    4.14e-01    4.40e-01    4.20e-01    4.07e-01    4.00e-01    4.00e-01\n",
      "        3    2.36e-01    2.68e-01    2.43e-01    2.27e-01    2.20e-01    2.23e-01\n",
      "        4    1.32e-01    1.63e-01    1.37e-01    1.21e-01    1.16e-01    1.22e-01\n",
      "        5    7.46e-02    1.04e-01    7.78e-02    6.29e-02    5.98e-02    6.86e-02\n",
      "        6    4.46e-02    7.13e-02    4.58e-02    3.23e-02    3.12e-02    4.26e-02\n",
      "        7    2.92e-02    5.32e-02    2.88e-02    1.66e-02    1.72e-02    3.04e-02\n",
      "        8    2.14e-02    4.32e-02    1.96e-02    8.59e-03    1.04e-02    2.50e-02\n",
      "        9    1.73e-02    3.74e-02    1.46e-02    4.48e-03    7.25e-03    2.28e-02\n",
      "       10    1.52e-02    3.41e-02    1.19e-02    2.37e-03    5.83e-03    2.21e-02\n",
      "       11    1.42e-02    3.20e-02    1.03e-02    1.29e-03    5.23e-03    2.20e-02\n",
      "       12    1.36e-02    3.07e-02    9.36e-03    7.19e-04    5.00e-03    2.20e-02\n"
     ]
    }
   ],
   "source": [
    "opt_result = krotov.optimize_pulses(\n",
    "    ensemble_objectives,\n",
    "    pulse_options,\n",
    "    tlist,\n",
    "    propagator=krotov.propagators.expm,\n",
    "    chi_constructor=krotov.functionals.chis_re,\n",
    "    info_hook=krotov.info_hooks.chain(\n",
    "        print_J_T_per_target,\n",
    "        krotov.info_hooks.print_table(\n",
    "            J_T=krotov.functionals.J_T_re, out=log_fh\n",
    "        ),\n",
    "    ),\n",
    "    check_convergence=krotov.convergence.Or(\n",
    "        krotov.convergence.value_below(1e-3, name='J_T'),\n",
    "        krotov.convergence.check_monotonic_error,\n",
    "    ),\n",
    "    parallel_map=(\n",
    "        krotov.parallelization.parallel_map,\n",
    "        krotov.parallelization.parallel_map,\n",
    "        krotov.parallelization.parallel_map_fw_prop_step,\n",
    "    ),\n",
    "    iter_stop=12,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After twelve iterations (which were sufficient to produce an error $<10^{-3}$\n",
    "in the original optimization), we find the average error over the ensemble to\n",
    "be still above $>10^{-2}$. However, the error for $\\mu = 1$ is only *slightly*\n",
    "larger than in the original optimization; the lack of success is entirely due\n",
    "to the large error for the other elements of the ensemble for $\\mu \\neq 1$.\n",
    "Achieving robustness is hard!\n",
    "\n",
    "We continue the optimization until the *average* error falls below $10^{-3}$:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:03.339376Z",
     "start_time": "2020-03-22T05:06:03.287117Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:11.033585Z",
     "iopub.status.busy": "2021-01-13T19:13:11.031992Z",
     "iopub.status.idle": "2021-01-13T19:13:11.046416Z",
     "shell.execute_reply": "2021-01-13T19:13:11.047940Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iteration    J_T(avg) J_T(μ=0.90) J_T(μ=0.95) J_T(μ=1.00) J_T(μ=1.05) J_T(μ=1.10)\n",
      "        0    1.36e-02    3.07e-02    9.37e-03    7.20e-04    5.00e-03    2.20e-02\n",
      "      ...\n",
      "      670    1.05e-03    2.80e-03    4.83e-04    1.10e-04    5.22e-04    1.34e-03\n",
      "      671    1.05e-03    2.79e-03    4.79e-04    1.10e-04    5.20e-04    1.33e-03\n",
      "      672    1.04e-03    2.77e-03    4.76e-04    1.10e-04    5.17e-04    1.33e-03\n",
      "      673    1.03e-03    2.76e-03    4.73e-04    1.11e-04    5.14e-04    1.32e-03\n",
      "      674    1.03e-03    2.74e-03    4.70e-04    1.11e-04    5.11e-04    1.31e-03\n",
      "      675    1.02e-03    2.72e-03    4.66e-04    1.11e-04    5.08e-04    1.30e-03\n",
      "      676    1.02e-03    2.71e-03    4.63e-04    1.12e-04    5.06e-04    1.29e-03\n",
      "      677    1.01e-03    2.69e-03    4.60e-04    1.12e-04    5.03e-04    1.28e-03\n",
      "      678    1.00e-03    2.68e-03    4.57e-04    1.12e-04    5.00e-04    1.27e-03\n",
      "      679    9.99e-04    2.67e-03    4.54e-04    1.13e-04    4.98e-04    1.27e-03\n"
     ]
    }
   ],
   "source": [
    "dumpfile = \"./ensemble_opt_result.dump\"\n",
    "if os.path.isfile(dumpfile):\n",
    "    opt_result = krotov.result.Result.load(dumpfile, objectives)\n",
    "    print_J_T_per_target(iteration=0, tau_vals=opt_result.tau_vals[12])\n",
    "    print(\"      ...\")\n",
    "    n_iters = len(opt_result.tau_vals)\n",
    "    for i in range(n_iters - 10, n_iters):\n",
    "        print_J_T_per_target(iteration=i, tau_vals=opt_result.tau_vals[i])\n",
    "else:\n",
    "    opt_result = krotov.optimize_pulses(\n",
    "        ensemble_objectives,\n",
    "        pulse_options,\n",
    "        tlist,\n",
    "        propagator=krotov.propagators.expm,\n",
    "        chi_constructor=krotov.functionals.chis_re,\n",
    "        info_hook=krotov.info_hooks.chain(\n",
    "            print_J_T_per_target,\n",
    "            krotov.info_hooks.print_table(\n",
    "                J_T=krotov.functionals.J_T_re, out=log_fh\n",
    "            ),\n",
    "        ),\n",
    "        check_convergence=krotov.convergence.Or(\n",
    "            krotov.convergence.value_below(1e-3, name='J_T'),\n",
    "            krotov.convergence.check_monotonic_error,\n",
    "        ),\n",
    "        parallel_map=(\n",
    "            krotov.parallelization.parallel_map,\n",
    "            krotov.parallelization.parallel_map,\n",
    "            krotov.parallelization.parallel_map_fw_prop_step,\n",
    "        ),\n",
    "        iter_stop=1000,\n",
    "        continue_from=opt_result,\n",
    "    )\n",
    "    opt_result.dump(dumpfile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:03.357680Z",
     "start_time": "2020-03-22T05:06:03.349278Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:11.059047Z",
     "iopub.status.busy": "2021-01-13T19:13:11.057674Z",
     "iopub.status.idle": "2021-01-13T19:13:11.062997Z",
     "shell.execute_reply": "2021-01-13T19:13:11.064398Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Krotov Optimization Result\n",
       "--------------------------\n",
       "- Started at 2019-12-14 07:18:32\n",
       "- Number of objectives: 1\n",
       "- Number of iterations: 679\n",
       "- Reason for termination: Reached convergence: J_T < 0.001\n",
       "- Ended at 2019-12-14 09:49:45 (2:31:13)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt_result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:03.366547Z",
     "start_time": "2020-03-22T05:06:03.360976Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:11.075343Z",
     "iopub.status.busy": "2021-01-13T19:13:11.073971Z",
     "iopub.status.idle": "2021-01-13T19:13:11.082285Z",
     "shell.execute_reply": "2021-01-13T19:13:11.083664Z"
    }
   },
   "outputs": [],
   "source": [
    "log_fh.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even now, the ideal Hamiltonian ($\\mu = 1$) has the lowest error in the\n",
    "ensemble by a significant margin. However, notice that the error in the $J_T$\n",
    "for $\\mu = 1$ is actually rising, while the errors for values of $\\mu \\neq 1$\n",
    "are falling by a much larger value! This is a good thing: we sacrifice a little\n",
    "bit of fidelity in the unperturbed dynamics to an increase in robustness.\n",
    "\n",
    "The optimized \"robust\" pulse looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:04.274992Z",
     "start_time": "2020-03-22T05:06:03.369715Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:11.171789Z",
     "iopub.status.busy": "2021-01-13T19:13:11.163776Z",
     "iopub.status.idle": "2021-01-13T19:13:12.018532Z",
     "shell.execute_reply": "2021-01-13T19:13:12.019481Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pump pulse amplitude and phase:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stokes pulse amplitude and phase:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_pulse_amplitude_and_phase(pulse_real, pulse_imaginary, tlist):\n",
    "    ax1 = plt.subplot(211)\n",
    "    ax2 = plt.subplot(212)\n",
    "    amplitudes = [\n",
    "        np.sqrt(x * x + y * y) for x, y in zip(pulse_real, pulse_imaginary)\n",
    "    ]\n",
    "    phases = [\n",
    "        np.arctan2(y, x) / np.pi for x, y in zip(pulse_real, pulse_imaginary)\n",
    "    ]\n",
    "    ax1.plot(tlist, amplitudes)\n",
    "    ax1.set_xlabel('time')\n",
    "    ax1.set_ylabel('pulse amplitude')\n",
    "    ax2.plot(tlist, phases)\n",
    "    ax2.set_xlabel('time')\n",
    "    ax2.set_ylabel('pulse phase (π)')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "print(\"pump pulse amplitude and phase:\")\n",
    "plot_pulse_amplitude_and_phase(\n",
    "    opt_result.optimized_controls[0], opt_result.optimized_controls[1], tlist\n",
    ")\n",
    "print(\"Stokes pulse amplitude and phase:\")\n",
    "plot_pulse_amplitude_and_phase(\n",
    "    opt_result.optimized_controls[2], opt_result.optimized_controls[3], tlist\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and produces the dynamics (in the unperturbed system) shown below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:04.614894Z",
     "start_time": "2020-03-22T05:06:04.277559Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:12.405321Z",
     "iopub.status.busy": "2021-01-13T19:13:12.399908Z",
     "iopub.status.idle": "2021-01-13T19:13:12.408484Z",
     "shell.execute_reply": "2021-01-13T19:13:12.409001Z"
    }
   },
   "outputs": [],
   "source": [
    "opt_robust_dynamics = opt_result.optimized_objectives[0].mesolve(\n",
    "    tlist, e_ops=[proj1, proj2, proj3]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:04.825054Z",
     "start_time": "2020-03-22T05:06:04.616827Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:12.459205Z",
     "iopub.status.busy": "2021-01-13T19:13:12.422134Z",
     "iopub.status.idle": "2021-01-13T19:13:12.678315Z",
     "shell.execute_reply": "2021-01-13T19:13:12.678861Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(opt_robust_dynamics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Robustness analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When comparing the robustness of the \"robust\" optimized pulse to that obtained\n",
    "from the original optimization for the unperturbed Hamiltonian, we should make\n",
    "sure that we have converged to a comparable error: We would like to avoid the\n",
    "suspicion that the ensemble error is below our threshold only because the error\n",
    "for $\\mu = 1$ is so much lower. Therefore, we continue the original unperturbed\n",
    "optimization for a few more iterations, until we reach the same error $\\approx\n",
    "1.13 \\times 10^{-4}$ that we found as the result of the ensemble optimization,\n",
    "looking at $\\mu=1$ only:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:04.832756Z",
     "start_time": "2020-03-22T05:06:04.827766Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:12.684646Z",
     "iopub.status.busy": "2021-01-13T19:13:12.683591Z",
     "iopub.status.idle": "2021-01-13T19:13:12.687337Z",
     "shell.execute_reply": "2021-01-13T19:13:12.688167Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J_T(μ=1) = 2.67e-03\n"
     ]
    }
   ],
   "source": [
    "print(\"J_T(μ=1) = %.2e\" % (1 - opt_result.tau_vals[-1][0].real))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:16.589810Z",
     "start_time": "2020-03-22T05:06:04.834702Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:12.695625Z",
     "iopub.status.busy": "2021-01-13T19:13:12.694334Z",
     "iopub.status.idle": "2021-01-13T19:13:24.387772Z",
     "shell.execute_reply": "2021-01-13T19:13:24.388689Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iter.      J_T  ∫gₐ(ϵ₁)dt  ∫gₐ(ϵ₂)dt  ∫gₐ(ϵ₃)dt  ∫gₐ(ϵ₄)dt   ∑∫gₐ(t)dt          J       ΔJ_T         ΔJ  secs\n",
      "0     5.91e-04   0.00e+00   0.00e+00   0.00e+00   0.00e+00    0.00e+00   5.91e-04        n/a        n/a     1\n",
      "13    3.25e-04   1.26e-04   1.98e-05   1.02e-04   1.84e-05    2.66e-04   5.90e-04  -2.66e-04  -3.35e-07     3\n",
      "14    1.83e-04   6.32e-05   1.41e-05   5.12e-05   1.29e-05    1.41e-04   3.24e-04  -1.42e-04  -2.00e-07     3\n",
      "15    1.06e-04   3.19e-05   1.00e-05   2.59e-05   9.11e-06    7.69e-05   1.83e-04  -7.70e-05  -1.22e-07     3\n"
     ]
    }
   ],
   "source": [
    "opt_result_unperturbed_cont = krotov.optimize_pulses(\n",
    "    [objective],\n",
    "    pulse_options,\n",
    "    tlist,\n",
    "    propagator=krotov.propagators.expm,\n",
    "    chi_constructor=krotov.functionals.chis_re,\n",
    "    info_hook=krotov.info_hooks.print_table(\n",
    "        J_T=krotov.functionals.J_T_re,\n",
    "        show_g_a_int_per_pulse=True,\n",
    "    ),\n",
    "    check_convergence=krotov.convergence.Or(\n",
    "        krotov.convergence.value_below(1.13e-4, name='J_T'),\n",
    "        krotov.convergence.check_monotonic_error,\n",
    "    ),\n",
    "    iter_stop=50,\n",
    "    continue_from=opt_result_unperturbed,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can compare the robustness of the optimized pulses from the original\n",
    "unperturbed optimization (label \"-1\"), the continued unperturbed optimization\n",
    "(label \"0\"), and the ensemble optimization (label \"1\"):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:25.330316Z",
     "start_time": "2020-03-22T05:06:16.592668Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:24.397825Z",
     "iopub.status.busy": "2021-01-13T19:13:24.396394Z",
     "iopub.status.idle": "2021-01-13T19:13:33.712317Z",
     "shell.execute_reply": "2021-01-13T19:13:33.713406Z"
    }
   },
   "outputs": [],
   "source": [
    "def _f(mu):\n",
    "    return pop_error(\n",
    "        opt_result_unperturbed_cont.optimized_objectives[0], mu=mu\n",
    "    )\n",
    "\n",
    "\n",
    "pop_errors_norobust_cont = parallel_map(_f, mu_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:34.908457Z",
     "start_time": "2020-03-22T05:06:25.332449Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:33.719861Z",
     "iopub.status.busy": "2021-01-13T19:13:33.718750Z",
     "iopub.status.idle": "2021-01-13T19:13:47.794342Z",
     "shell.execute_reply": "2021-01-13T19:13:47.795130Z"
    }
   },
   "outputs": [],
   "source": [
    "def _f(mu):\n",
    "    return pop_error(opt_result.optimized_objectives[0], mu=mu)\n",
    "\n",
    "\n",
    "pop_errors_robust = parallel_map(_f, mu_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-22T05:06:35.372866Z",
     "start_time": "2020-03-22T05:06:34.911667Z"
    },
    "execution": {
     "iopub.execute_input": "2021-01-13T19:13:47.832562Z",
     "iopub.status.busy": "2021-01-13T19:13:47.826661Z",
     "iopub.status.idle": "2021-01-13T19:13:48.440301Z",
     "shell.execute_reply": "2021-01-13T19:13:48.440799Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_robustness(\n",
    "    mu_vals,\n",
    "    pop_errors_robust,\n",
    "    pop_errors0=[pop_errors_norobust_cont, pop_errors_norobust],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that without the ensemble optimization, we only lower the error for\n",
    "exactly $\\mu = 1$: the more we converge, the less robust the result. In\n",
    "contrast, the ensemble optimization results in considerably lower errors (order\n",
    "of magnitude!) throughout the highlighted \"region of interest\" and beyond."
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "jupytext": {
   "formats": ""
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
